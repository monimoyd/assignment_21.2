val flights = sc.parallelize(List(
("SEA", "JFK", "DL", "418", "7:00"),
("SFO", "LAX", "AA", "1250", "7:05"),
("SFO", "JFK", "VX", "12", "7:05"),
("JFK", "LAX", "DL", "424", "7:10"),
("LAX", "SEA", "DL", "5737", "7:10")))

// Dimension table
val airports = sc.parallelize(List(
("JFK", "John F. Kennedy International Airport", "New York", "NY"),
("LAX", "Los Angeles International Airport", "Los Angeles", "CA"),
("SEA", "Seattle-Tacoma International Airport", "Seattle", "WA"),
("SFO", "San Francisco International Airport", "San Francisco", "CA")))

// Dimension table
val airlines = sc.parallelize(List(
("AA", "American Airlines"),
("DL", "Delta Airlines"),
("VX", "Virgin America")))

// Create broadcast variable broadcastAirportsMap
var airportsMap = airports.map(t => (t._1, t._3)).collectAsMap
val broadcastAirportsMap = sc.broadcast(airportsMap)

// Create broadcast variable broadcastAirlinesMap
var airlinesMap = airlines.map(t => (t._1, t._2)).collectAsMap
val broadcastAirlinesMap = sc.broadcast(airlinesMap)

// Create Dataframe flightsDetailedDF and display records
val flightsDetailed = flights.map(t=> ( broadcastAirportsMap.value.get(t._1),  broadcastAirportsMap.value.get(t._2),  broadcastAirlinesMap.value.get(t._3), t._4, t._5))
val flightsDetailedDF = flightsDetailed.toDF("source_airport", "dest_airport", "airlines", "price", "departure_time")
flightsDetailedDF.show






Seattle New York Delta Airlines 418 7:00
San Francisco Los Angeles American Airlines 1250 7:05
San Francisco New York Virgin America 12 7:05
New York Los Angeles Delta Airlines 424 7:10
Los Angeles Seattle Delta Airlines 5737 7:10
